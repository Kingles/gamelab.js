// Generated by IcedCoffeeScript 1.6.2d
(function() {
  var GAMELABDIR, PROJECT, PROJECTDIR, SCRIPTDIR, args, cp, exec, fs, ice, mkdir_p, path,
    _this = this;



  fs = require('fs');

  path = require('path');

  exec = require('child_process').exec;

  args = process.argv;

  mkdir_p = function(to_split, cb, pos) {
    var dir, next, tree;
    if (to_split == null) {
      to_split = "hello.coffee";
    }
    if (pos == null) {
      pos = 0;
    }
    tree = to_split.split('/');
    if (pos === tree.length) {
      return cb(null, to_split);
    }
    dir = tree.slice(0, pos + 1).join('/');
    next = function() {
      return mkdir_p(to_split, cb, pos + 1);
    };
    if (tree[pos] === '') {
      return next();
    } else {
      return fs.exists(dir, function(exists) {
        if (exists) {
          return next();
        } else {
          return fs.mkdir(dir, function(err) {
            if (err) {
              return cb(err);
            } else {
              return next();
            }
          });
        }
      });
    }
  };

  cp = function(source, target, cb) {
    var cbCalled, done, rd, wr;
    cbCalled = false;
    rd = fs.createReadStream(source);
    rd.on("error", function(err) {
      return done(err);
    });
    wr = fs.createWriteStream(target);
    wr.on("error", function(err) {
      return done(err);
    });
    wr.on("close", function(ex) {
      return done();
    });
    rd.pipe(wr);
    return done = function(err) {
      if (!cbCalled) {
        cb(err);
        return cbCalled = true;
      }
    };
  };

  ice = function(toIce) {
    toIce = toIce.split(".coffee")[0];
    return exec("iced -c " + toIce + ".coffee", function(stdout, stderr, error) {
      sys.print(stdout);
      sys.print(stderr);
      if (error) {
        return console.log(error);
      }
    });
  };

  PROJECT = args[2];

  SCRIPTDIR = fs.realpathSync(args[1]);

  GAMELABDIR = "" + (path.dirname(SCRIPTDIR)) + "/..";

  mkdir_p(PROJECT);

  PROJECTDIR = fs.realpathSync(PROJECT);

  process.chdir(PROJECTDIR);

  fs.mkdir("shared");

  fs.mkdir("client");

  fs.mkdir("server");

  cp("GAMELABDIR/.gitignore", "./.gitignore");

  fs.symlinkSync("" + GAMELABDIR, "gamelab.js", 'dir');

  process.chdir("client");

  fs.mkdir("scenes");

  fs.mkdir("classes");

  fs.symlinkSync("" + GAMELABDIR + "/client", "gamelabClient", 'dir');

  fs.symlinkSync("" + GAMELABDIR + "/shared", "gamelabShared", 'dir');

  cp("" + GAMELABDIR + "/server/example/clientCore.coffee", "core.coffee");

  ice("core");

  cp("" + GAMELABDIR + "/client/index.html", "index.html");

  process.chdir("scenes");

  cp("" + GAMELABDIR + "/server/example/scene.coffee", "example.coffee");

  ice("example");

  process.chdir("../server");

  fs.mkdir("classes");

  cp("" + GAMELABDIR + "/server/init.js", "init.js");

  cp("" + GAMELABDIR + "/server/example/settings.coffee", "settings.coffee");

  cp("" + GAMELABDIR + "/server/example/serverCore.coffee", "core.coffee");

  ice("core");

  process.chdir("../..");

}).call(this);
